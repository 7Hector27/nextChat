import Head from 'next/head';
import styles from '../styles/index.module.scss';
import { useAuth } from '../firebase/auth';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { getDatabase, ref, set, onValue } from 'firebase/database';
import app from '../firebase/clientApp';
import { useObjectVal } from 'react-firebase-hooks/database';

import useSWR from 'swr';
// import '../styles/index.module.scss';
const Home = () => {
  const { user, login, logout } = useAuth();
  const router = useRouter();
  const database = getDatabase(app);
  interface Input {
    chatname?: string;
    password?: string;
  }

  const [bool, setBool] = useState<Boolean>(true);
  const [create, setCreate] = useState<Input>({ chatname: '', password: '' });
  const { data, error } = useSWR(
    `https://nextchat-73718-default-rtdb.firebaseio.com/${create.chatname}.json`,
    (url) => fetch(url).then((res) => res.json())
  );

  const createChatroom = () => {
    if (!user) {
      return alert('Must Be Logged In To Create Chatroom');
    }
    if (create.chatname === '' || create.password === '') {
      return alert('Please Fill in All Inputs');
    }
    if (data?.password) {
      return alert('Chat name already Exists Please use a different Name');
    }

    set(ref(database, `${create.chatname}`), {
      password: create.password,
    })
      .then(() => {
        // alert('ChatRoom Created');
        router.push({
          pathname: `/chatroom`,
          query: { password: create.password, chatname: create.chatname },
        });
      })
      .catch((error) => {
        alert('unsuccessful, error' + error);
      });
  };
  // const [value, loading, error] = useObjectVal<any>(
  //   ref(database, `${create?.chatname}`)
  // );

  const JoinChatroom = () => {
    if (!user) {
      return alert('Must Be Logged In To Create Chatroom');
    }
    if (create.chatname === undefined || create.password === undefined) {
      return alert('Please Fill in All Inputs');
    }

    if (create.password === data.password) {
      router.push({
        pathname: `/chatroom`,
        query: { password: create.password, chatname: create.chatname },
      });
    } else {
      alert('Please Enter the Correct Password');
    }
  };

  return (
    <div className={styles.LandingContainer}>
      <div className={styles.row}>
        <div className={styles.column}>
          <div className={styles.leftSide}>
            <Head>
              <title>NextChat</title>
              <meta name='description' content='Generated by create next app' />
              <link rel='icon' href='/favicon.ico' />
            </Head>
            <h3 className={styles.LandingPageName}>NextChat </h3>
            <div className={styles.ButtonTabs}>
              <button
                className={styles.CreateButton}
                onClick={() => setBool(true)}
              >
                {' '}
                Create Chatroom
              </button>
              <button
                className={styles.JoinButton}
                onClick={() => setBool(false)}
              >
                Join Chatroom
              </button>
            </div>
            <div className={styles.InputFields}>
              {' '}
              <div className={styles.ChatroomNameInput}>
                <label> ChatRoom Name</label>
                <input
                  type='text'
                  placeholder='Enter ChatRoom Name'
                  value={create.chatname}
                  onChange={(e) =>
                    setCreate({ ...create, chatname: e.target.value })
                  }
                />
              </div>
              <div className={styles.ChatroomPasswordInput}>
                <label>ChatRoom Password</label>
                <input
                  type='text'
                  placeholder='Enter ChatRoom Password'
                  value={create.password}
                  onChange={(e) =>
                    setCreate({ ...create, password: e.target.value })
                  }
                />
              </div>
              {bool ? (
                <div>
                  <button
                    className={styles.CreateJoinButton}
                    onClick={() => createChatroom()}
                  >
                    Creating a Chatroom
                  </button>
                </div>
              ) : (
                <div>
                  <button
                    className={styles.CreateJoinButton}
                    onClick={() => JoinChatroom()}
                  >
                    Join a Chatroom
                  </button>
                </div>
              )}
            </div>
            <div className={styles.UserInfo}>
              {user ? (
                <div>
                  Signed in as <h4>{user.displayName}</h4> ,{' '}
                  <a onClick={logout}>sign out</a>
                </div>
              ) : (
                <p>
                  <a onClick={login}>Sign In with Google</a>
                </p>
              )}
            </div>
          </div>
        </div>
        <div className={styles.column2}></div>
      </div>
    </div>
  );
};

export default Home;
